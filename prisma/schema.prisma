// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  name      String?
  userName  String?   @unique
  email     String?   @unique
  password  String?
  bio       String?
  image     String?
  DOB       DateTime?
  location  String?
  onboarded Boolean   @default(false)

  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]

  following    Follows[]      @relation("follower")
  followers    Follows[]      @relation("following")
  posts        Post[]
  postLikes    PostLikes[]
  commentLikes CommentLikes[]
  comments     Comment[]
}

model Follows {
  followerId  String
  followingId String
  follower    User   @relation("follower", fields: [followerId], references: [id])
  following   User   @relation("following", fields: [followingId], references: [id])

  @@id([followerId, followingId])
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  body      String
  images    String[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  likes    PostLikes[]
  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  body String

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  likes CommentLikes[]
}

model PostLikes {
  id     String @id @default(cuid())
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model CommentLikes {
  id        String  @id @default(cuid())
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@unique([commentId, userId])
}
